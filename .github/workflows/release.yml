name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write  # For trusted PyPI publishing

jobs:
  wait-for-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Wait for Quick Check to complete
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: "Quick Check"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success,skipped,cancelled

      - name: Wait for Format & Lint to complete
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: "Format & Lint"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success,skipped,cancelled

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: wait-for-ci

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Verify version matches tag
        run: |
          TAG_VERSION=${GITHUB_REF_NAME#v}

          # Get version from package
          PACKAGE_VERSION=""
          if [ -f setup.py ]; then
            PACKAGE_VERSION=$(python setup.py --version 2>/dev/null || echo "")
          fi

          if [ -z "$PACKAGE_VERSION" ] && [ -f pyproject.toml ]; then
            PACKAGE_VERSION=$(python -c "
try:
    import tomllib
except ImportError:
    import tomli as tomllib
with open('pyproject.toml', 'rb') as f:
    data = tomllib.load(f)
    print(data.get('project', {}).get('version', ''))
" 2>/dev/null || echo "")
          fi

          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "‚ùå Version mismatch: Package has $PACKAGE_VERSION but tag is $TAG_VERSION"
            exit 1
          fi
          echo "‚úÖ Version verified: $PACKAGE_VERSION"

      - name: Build distributions
        run: |
          python -m build
          ls -la dist/

      - name: Check distributions
        run: |
          twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-distributions
          path: dist/

  testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && contains(github.ref, 'rc')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/css-to-rust-converter

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && !contains(github.ref, 'rc')
    environment:
      name: pypi
      url: https://pypi.org/p/css-to-rust-converter

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pypi]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-distributions
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify success
        if: success()
        run: |
          echo "üéâ Successfully published css-to-rust-converter ${{ github.ref_name }} to PyPI!"
          echo "üì¶ Available at: https://pypi.org/project/css-to-rust-converter"
          echo "üìö Documentation: https://css-to-rust-converter.readthedocs.io"

      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Release failed for ${{ github.ref_name }}"
          echo "Please check the logs and try again."
