name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write
  checks: write
  security-events: write

jobs:
  # Auto-fix job runs first
  auto-fix:
    name: Auto-Fix Code
    runs-on: ubuntu-latest
    # Skip if the commit was made by the auto-fix bot to prevent loops
    if: "!contains(github.event.head_commit.message, '[auto-fix]')"
    timeout-minutes: 10
    outputs:
      changes_made: ${{ steps.verify_changes.outputs.changes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use the PR head ref if PR, otherwise use default
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref }}
          # Use token with write permissions
          token: ${{ secrets.GITHUB_TOKEN }}
          # Fetch full history for better git operations
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .mypy_cache
          key: ${{ runner.os }}-pip-autofix-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-autofix-
            ${{ runner.os }}-pip-

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort autoflake autopep8

      - name: Configure git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Auto-Fix Bot"

      - name: Auto-fix with black
        run: |
          echo "Running black formatter..."
          black . || true

      - name: Auto-fix with isort
        run: |
          echo "Running isort..."
          isort . || true

      - name: Auto-fix with autoflake
        run: |
          echo "Running autoflake to remove unused imports and variables..."
          autoflake --in-place --recursive --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys --exclude=venv,.venv,__pycache__ . || true

      - name: Fix f-strings without placeholders
        run: |
          echo "Fixing f-strings without placeholders..."
          # Find and fix f-strings that don't have placeholders
          find . -name "*.py" -type f -not -path "*/\.*" -not -path "*/venv/*" -not -path "*/__pycache__/*" -exec sed -i 's/f"\([^{]*\)"/"\1"/g' {} \; || true
          find . -name "*.py" -type f -not -path "*/\.*" -not -path "*/venv/*" -not -path "*/__pycache__/*" -exec sed -i "s/f'\([^{]*\)'/'\1'/g" {} \; || true

      - name: Check for changes
        id: verify_changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Code formatting changes detected"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No code formatting changes needed"
          fi

      - name: Commit and push changes
        if: steps.verify_changes.outputs.changes == 'true'
        run: |
          # Add all changes
          git add -A

          # Commit with [auto-fix] to prevent loops
          git commit -m "ðŸ¤– [auto-fix] Format code with black, isort, and autoflake

          Auto-formatted by GitHub Actions:
          - Applied black code formatting
          - Sorted imports with isort
          - Removed unused imports with autoflake"

          # Push changes
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Pushing to PR branch..."
            git push origin HEAD:${{ github.event.pull_request.head.ref }}
          else
            echo "Pushing to branch..."
            git push origin HEAD
          fi

      - name: Comment on PR
        if: |
          github.event_name == 'pull_request' &&
          steps.verify_changes.outputs.changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ¤– **Auto-Fix Applied**\n\nI\'ve automatically formatted your code with:\n- âœ¨ **black** - Python code formatter\n- ðŸ“¦ **isort** - Import statement organizer\n- ðŸ§¹ **autoflake** - Unused import remover\n\nThe changes have been pushed to your PR. Please pull the latest changes to your local branch.'
            })

  # Quick syntax check
  check:
    name: Quick Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [auto-fix]
    # Skip if auto-fix made changes (they'll be in a new commit)
    if: needs.auto-fix.outputs.changes_made != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .mypy_cache
          key: ${{ runner.os }}-pip-check-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-check-
            ${{ runner.os }}-pip-

      - name: Verify Python syntax
        run: python -m py_compile **/*.py || true

  # Formatting and linting
  lint:
    name: Format & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [auto-fix]
    # Skip if auto-fix made changes (they'll be in a new commit)
    if: needs.auto-fix.outputs.changes_made != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .mypy_cache
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy

      - name: Check formatting with black
        run: black --check .

      - name: Check import sorting with isort
        run: isort --check-only .

      - name: Lint with flake8
        run: flake8 .

      - name: Type check with mypy
        run: mypy . --ignore-missing-imports || true

  # Main test job
  test-and-coverage:
    name: Test & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [check, lint]
    # Only run if previous jobs passed or were skipped
    if: |
      always() &&
      (needs.check.result == 'success' || needs.check.result == 'skipped') &&
      (needs.lint.result == 'success' || needs.lint.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .pytest_cache
          key: ${{ runner.os }}-pip-test-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install package in editable mode if setup.py exists
          if [ -f setup.py ] || [ -f pyproject.toml ]; then
            pip install -e .[dev,test] || pip install -e .
          fi
          # Install test requirements
          if [ -f requirements-test.txt ]; then
            pip install -r requirements-test.txt
          elif [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-cov pytest-xdist

      - name: Run tests with coverage
        run: |
          pytest -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [auto-fix]
    # Skip if auto-fix made changes (they'll be in a new commit)
    if: needs.auto-fix.outputs.changes_made != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit[toml]

      - name: Run safety check
        run: |
          # Install project dependencies first
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          safety check --json || true

      - name: Run bandit security check
        run: bandit -r . -f json || true

  # Test on multiple Python versions
  python-versions:
    name: Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: [auto-fix]
    # Skip if auto-fix made changes (they'll be in a new commit)
    if: needs.auto-fix.outputs.changes_made != 'true'
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest]
        include:
          - python-version: "3.11"
            os: windows-latest
          - python-version: "3.11"
            os: macos-latest
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/AppData/Local/pip/Cache
            ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install package if setup.py exists
          if [ -f setup.py ] || [ -f pyproject.toml ]; then
            pip install -e .
          fi
          # Install requirements
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest

      - name: Run tests
        run: pytest -v
